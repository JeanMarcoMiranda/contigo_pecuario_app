import 'package:contigo_pecuario/features/animalControl/domain/entities/dead_animal_control_entity.dart';

class DeadAnimalControlEntityModel extends DeadAnimalControlEntity {
  DeadAnimalControlEntityModel(
      {required super.activeServiceId,
      required super.isServed,
      required super.reproductiveStatus,
      required super.activeService,
      required super.id,
      required super.name,
      required super.active,
      required super.isFeatured,
      required super.identifier,
      required super.agribusinessId,
      required super.birthDate,
      required super.entityId,
      required super.herdDate,
      required super.color,
      required super.gender,
      required super.baseChildrenLength,
      required super.baseBirthsLength,
      required super.baseAbortionsLength,
      required super.isReproductor,
      required super.images,
      required super.isDried,
      required super.isPregnant,
      required super.pregnantDate,
      required super.registerNumber,
      required super.createTimestamp,
      required super.modifyTimestamp,
      required super.motive,
      required super.activeUpdatedOn,
      required super.motiveDetail});

  factory DeadAnimalControlEntityModel.fromJson(Map<String, dynamic> json) => DeadAnimalControlEntityModel(
    activeServiceId: json["activeServiceId"],
    isServed: json["isServed"],
    reproductiveStatus: json["reproductiveStatus"],
    activeService: json["activeService"],
    id: json["_id"],
    name: json["name"],
    active: json["active"],
    isFeatured: json["isFeatured"],
    identifier: json["identifier"],
    agribusinessId: json["agribusinessId"],
    birthDate: DateTime.parse(json["birthDate"]),
    entityId: json["entityId"],
    herdDate: DateTime.parse(json["herdDate"]),
    color: json["color"],
    gender: json["gender"],
    baseChildrenLength: json["baseChildrenLength"],
    baseBirthsLength: json["baseBirthsLength"],
    baseAbortionsLength: json["baseAbortionsLength"],
    isReproductor: json["isReproductor"],
    images: List<dynamic>.from(json["images"].map((x) => x)),
    isDried: json["isDried"],
    isPregnant: json["isPregnant"],
    pregnantDate: json["pregnantDate"],
    registerNumber: json["registerNumber"],
    createTimestamp: DateTime.parse(json["_createTimestamp"]),
    modifyTimestamp: DateTime.parse(json["_modifyTimestamp"]),
    motive: json["motive"],
    activeUpdatedOn: DateTime.parse(json["activeUpdatedOn"]),
    motiveDetail: json["motiveDetail"],
  );

  Map<String, dynamic> toJson() => {
    "activeServiceId": activeServiceId,
    "isServed": isServed,
    "reproductiveStatus": reproductiveStatus,
    "activeService": activeService,
    "_id": id,
    "name": name,
    "active": active,
    "isFeatured": isFeatured,
    "identifier": identifier,
    "agribusinessId": agribusinessId,
    "birthDate": birthDate.toIso8601String(),
    "entityId": entityId,
    "herdDate": herdDate.toIso8601String(),
    "color": color,
    "gender": gender,
    "baseChildrenLength": baseChildrenLength,
    "baseBirthsLength": baseBirthsLength,
    "baseAbortionsLength": baseAbortionsLength,
    "isReproductor": isReproductor,
    "images": List<dynamic>.from(images.map((x) => x)),
    "isDried": isDried,
    "isPregnant": isPregnant,
    "pregnantDate": pregnantDate,
    "registerNumber": registerNumber,
    "_createTimestamp": createTimestamp.toIso8601String(),
    "_modifyTimestamp": modifyTimestamp.toIso8601String(),
    "motive": motive,
    "activeUpdatedOn": activeUpdatedOn.toIso8601String(),
    "motiveDetail": motiveDetail,
  };
}
